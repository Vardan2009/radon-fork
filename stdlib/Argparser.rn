
_i = 0
FULLNAME_INVALID = _i++
FULLNAME_FLAG = _i++
FULLNAME_NAMED = _i++
_i = 0

fun str_starts_with(s, prefix) {
    if str_len(s) < str_len(prefix) {
        return false
    }
    for i = 0 to str_len(prefix) {
        if s[i] != prefix[i] {
            return false
        }
    }
    return true
}

class Argparser {
    fun __constructor__(desc="") {
        this.desc = desc
        this.pos_opts = []
        this.flags = []
        this.named = []
    }

    fun add_pos_opt(name, desc) {
        arr_append(this.pos_opts, {"name": name, "desc": desc})
        return this
    }

    fun add_flag(fullname, shortname, desc) {
        assert str_starts_with(fullname, "--"), "Flags must start with '--'"
        assert str_starts_with(shortname, "-"), "Flag shortnames must start with '-'"
        assert not str_starts_with(shortname, "--"), "Flag shortnames must not start with '--'"
        arr_append(this.flags, {"fullname": fullname, "shortname": shortname[1:], "desc": desc})
        return this
    }

    fun add_named(name, desc) {
        assert str_starts_with(name, "--"), "Named arguments must start with '--'"
        arr_append(this.named, {"name": name, "desc": desc})
        return this
    }

    fun usage(program_name) {
        ret = "Usage: "+program_name+" <flags> <options>\n"
        ret += "OPTIONS:\n"
        for opt in this.pos_opts {
            nonlocal ret += "    " + opt["name"] + ": " + opt["desc"] + "\n"
        }
        ret += "FLAGS:\n"
        for flag in this.flags {
            nonlocal ret += "    " + flag["fullname"] + ", " + flag["shortname"] + ": " + flag["desc"] + "\n"
        }
        for named in this.named {
            nonlocal ret += "    " + named["name"] + " <value>: " + named["desc"] + "\n"
        }
        return ret
    }

    fun report_error(program_name, msg) {
        print(this.usage(program_name))
        print("ERROR: "+msg)
        pyapi("exit(1)", {})
    }

    fun flag_by_shortname(shortname) {
        for flag in this.flags {
            if flag["shortname"] == shortname {
                return flag
            }
        }
        return null
    }

    fun fullname_type(fullname) {
        for flag in this.flags {
            if flag["fullname"] == fullname {
                return FULLNAME_FLAG
            }
        }
        for named in this.named {
            if named["name"] == fullname {
                return FULLNAME_NAMED
            }
        }
        return FULLNAME_INVALID
    }

    fun parse(args) {
        pos_opts = this.pos_opts
        flags = this.flags

        program_name = arr_pop(args, 0)
        parsed = {}
        for pos_opt in pos_opts {
            parsed[pos_opt["name"]] = null
        }
        for flag in flags {
            parsed[flag["fullname"]] = false
        }
        for named in this.named {
            parsed[named["name"]] = null
        }
        pos_opts_idx = 0
        while arr_len(args) > 0 {
            arg = arr_pop(args, 0)
            if str_starts_with(arg, "-") {
                if str_starts_with(arg, "--") {
                    switch this.fullname_type(arg) {
                        case FULLNAME_INVALID -> this.report_error(program_name, "unknown flag: '"+arg+"'")
                        case FULLNAME_FLAG -> parsed[arg] = true
                        case FULLNAME_NAMED {
                            value = arr_pop(args, 0)
                            parsed[arg] = value
                        }
                    }
                } else {
                    for letter in arg[1:] {
                        flag = this.flag_by_shortname(letter)
                        if is_null(flag) {
                            this.report_error(program_name, "unknown flag: '-"+letter+"'")
                        } else {
                            parsed[flag["fullname"]] = true
                        }
                    }
                }
            } else {
                if pos_opts_idx >= arr_len(pos_opts) {
                    this.report_error(program_name, "unexpected positional argument: '" + arg + "'")
                }
                arg_name = pos_opts[pos_opts_idx]["name"]
                parsed[arg_name] = arg
                nonlocal pos_opts_idx++
            }
        }
        return parsed
    }
}
